// Generated by gencpp from file show_msg/info.msg
// DO NOT EDIT!


#ifndef SHOW_MSG_MESSAGE_INFO_H
#define SHOW_MSG_MESSAGE_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace show_msg
{
template <class ContainerAllocator>
struct info_
{
  typedef info_<ContainerAllocator> Type;

  info_()
    : state()
    , speed(0.0)
    , steer_angle(0.0)
    , error1(0.0)
    , error2(0.0)  {
    }
  info_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , speed(0.0)
    , steer_angle(0.0)
    , error1(0.0)
    , error2(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _steer_angle_type;
  _steer_angle_type steer_angle;

   typedef float _error1_type;
  _error1_type error1;

   typedef double _error2_type;
  _error2_type error2;





  typedef boost::shared_ptr< ::show_msg::info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::show_msg::info_<ContainerAllocator> const> ConstPtr;

}; // struct info_

typedef ::show_msg::info_<std::allocator<void> > info;

typedef boost::shared_ptr< ::show_msg::info > infoPtr;
typedef boost::shared_ptr< ::show_msg::info const> infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::show_msg::info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::show_msg::info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace show_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'show_msg': ['/home/aibot/wheelchair_bed/src/show_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::show_msg::info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::show_msg::info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::show_msg::info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::show_msg::info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::show_msg::info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::show_msg::info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::show_msg::info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "196e07550a586fd28bbab6990451da42";
  }

  static const char* value(const ::show_msg::info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x196e07550a586fd2ULL;
  static const uint64_t static_value2 = 0x8bbab6990451da42ULL;
};

template<class ContainerAllocator>
struct DataType< ::show_msg::info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "show_msg/info";
  }

  static const char* value(const ::show_msg::info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::show_msg::info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string state\n\
float32 speed\n\
float32 steer_angle\n\
float32 error1   \n\
float64 error2   \n\
";
  }

  static const char* value(const ::show_msg::info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::show_msg::info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.speed);
      stream.next(m.steer_angle);
      stream.next(m.error1);
      stream.next(m.error2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::show_msg::info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::show_msg::info_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "steer_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle);
    s << indent << "error1: ";
    Printer<float>::stream(s, indent + "  ", v.error1);
    s << indent << "error2: ";
    Printer<double>::stream(s, indent + "  ", v.error2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHOW_MSG_MESSAGE_INFO_H
